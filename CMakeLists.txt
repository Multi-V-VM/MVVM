cmake_minimum_required(VERSION 3.22)
project(MVVM LANGUAGES C CXX)
set(CMAKE_CXX_STANDARD 23)

find_package(fmt REQUIRED)
find_package(spdlog REQUIRED)
find_package(cxxopts REQUIRED)
find_package(LLVM REQUIRED)
include(CTest)
if (WIN32)
    set(WASI_SDK_DIR D:/wasi-sdk/)
else ()
    set(WASI_SDK_DIR /opt/wasi-sdk/)
endif ()

if (APPLE)
    set(WAMR_BUILD_LIB_PTHREAD 1)
    set(WAMR_BUILD_LIB_PTHREAD_SEMAPHORE 1)
    set(WAMR_BUILD_LIB_WASI_THREADS 1)
    set(WAMR_BUILD_THREAD_MGR 1)
    set(WAMR_BUILD_PLATFORM "darwin")
    if (CMAKE_SYSTEM_PROCESSOR MATCHES "^(arm64|aarch64)")
        set(BLAS_LIBRARIES /opt/homebrew/opt/openblas/lib/libopenblas.0.dylib)
    else ()
        set(BLAS_LIBRARIES /usr/local/opt/openblas/lib/libopenblas.0.dylib)
    endif ()
    find_path(BLAS_INCLUDE_DIRS cblas.h
            /opt/homebrew/opt/openblas/include
            /usr/local/opt/openblas/include
            $ENV{BLAS_HOME}/include)
    message(${BLAS_INCLUDE_DIRS})
elseif (LINUX)
    set(WAMR_BUILD_PLATFORM "linux")
    set(WAMR_BUILD_LIB_PTHREAD 1)
    set(WAMR_BUILD_LIB_PTHREAD_SEMAPHORE 1)
    set(WAMR_BUILD_LIB_WASI_THREADS 1)
    set(WAMR_BUILD_THREAD_MGR 1)
    set(BLAS_LIBRARIES -lopenblas -libverbs -lrdmacm)
    find_path(BLAS_INCLUDE_DIRS cblas.h
            /usr/include
            /usr/local/include
            /opt/OpenBLAS/include/
            $ENV{BLAS_HOME}/include)
    message(${BLAS_INCLUDE_DIRS})
    # set(WIN_EXTRA_LIBS ibverbs rdmacm)
else ()
    set(WAMR_BUILD_PLATFORM "windows")
    set(WAMR_BUILD_LIB_PTHREAD 1)
    set(WAMR_BUILD_LIB_WASI_THREADS 1)
    set(WAMR_BUILD_THREAD_MGR 1)
    set(WAMR_BUILD_LIBC_UVWASI 1)
    set(CMAKE_MSVC_RUNTIME_LIBRARY "")
    set(CMAKE_GENERATOR_PLATFORM "")
    set(CMAKE_CXX_FLAGS "/MD")
    find_library(DETOURS_LIBRARY detours REQUIRED)
    find_path(DETOURS_INCLUDE_DIRS "detours/detours.h")
    find_library(DETOURS_LIBRARY detours REQUIRED)
    set(WIN_EXTRA_LIBS uvwasi_a msvcrt.lib libcmt.lib ${DETOURS_LIBRARY} uv_a ws2_32)
    include_directories(${DETOURS_INCLUDE_DIRS})
if(MVVM_BUILD_TEST)
    set(BLAS_LIBRARIES "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/lib/x64/cublas.lib" "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/lib/x64/cudart.lib")
    set(BLAS_INCLUDE_DIRS "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/include/")
endif()
endif ()

if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    add_compile_options(-fdiagnostics-color=always)
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    add_compile_options(-fcolor-diagnostics)
endif ()

# Set WAMR_BUILD_TARGET, currently values supported:
# "X86_64", "AMD_64", "X86_32", "AARCH64[sub]", "ARM[sub]", "THUMB[sub]",
# "MIPS", "XTENSA", "RISCV64[sub]", "RISCV32[sub]"
if (NOT DEFINED WAMR_BUILD_TARGET)
    if (CMAKE_SYSTEM_PROCESSOR MATCHES "^(arm64|aarch64)")
        set(WAMR_BUILD_TARGET "AARCH64")
    elseif (CMAKE_SYSTEM_PROCESSOR STREQUAL "riscv64")
        set(WAMR_BUILD_TARGET "RISCV64")
    else ()
        # Build as X86_64 by default in 64-bit platform
        set(WAMR_BUILD_TARGET "X86_64")
    endif ()
endif ()

if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Debug)
endif ()

if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    add_definitions(-DSPDLOG_ACTIVE_LEVEL=SPDLOG_LEVEL_DEBUG)
else()
    add_definitions(-DSPDLOG_ACTIVE_LEVEL=SPDLOG_LEVEL_INFO)
endif()

set(WAMR_BUILD_INTERP 1)
set(WAMR_BUILD_AOT 1)
set(WAMR_BUILD_JIT 0)
set(WAMR_BUILD_DEBUG_INTERP 0)
set(WAMR_BUILD_DEBUG_AOT 0)
set(WAMR_BUILD_FAST_JIT 0)
set(WAMR_BUILD_WASI_NN 1)
set(WAMR_BUILD_WASI_NN_ENABLE_GPU 1)
set(WAMR_BUILD_LIBC_BUILTIN 1)
set(WAMR_BUILD_LIBC_WASI 1)
set(WAMR_BUILD_DUMP_CALL_STACK 1)
set(WAMR_BUILD_FAST_INTERP 0)
set(WAMR_BUILD_SHARED_MEMORY 1)
set(WAMR_BUILD_BULK_MEMORY 1)
set(WAMR_BUILD_REF_TYPES 1)
set(WAMR_BUILD_SIMD 1)
set(WAMR_BUILD_CUSTOM_NAME_SECTION 1)
set(WAMR_BUILD_CHECKPOINT_RESTORE 1)
set(WAMR_DISABLE_HW_BOUND_CHECK 1)

set(CMAKE_SHARED_LINKER_FLAGS "-Wl,-U,_get_ext_lib_export_apis")
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS}")

set(CMAKE_MACOSX_RPATH True)

set(WAMR_ROOT_DIR ${CMAKE_CURRENT_SOURCE_DIR}/lib/wasm-micro-runtime)

include(${WAMR_ROOT_DIR}/build-scripts/runtime_lib.cmake)
add_library(vmlib ${WAMR_RUNTIME_LIB_SOURCE})

include(${SHARED_DIR}/utils/uncommon/shared_uncommon.cmake)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include ${CMAKE_CURRENT_SOURCE_DIR}/lib/wasm-micro-runtime/core/iwasm/aot ${CMAKE_CURRENT_SOURCE_DIR}/lib/yalantinglibs/include ${BLAS_INCLUDE_DIRS} ${CMAKE_CURRENT_SOURCE_DIR}/lib/libcrafter/libcrafter/)

add_subdirectory(lib/s2n-tls)

if (MVVM_BUILD_BENCH)
    add_subdirectory(bench)
endif()
if (MVVM_BUILD_TEST)
    add_definitions(-DMVVM_BUILD_TEST=1)
    add_subdirectory(test)
endif()

file(GLOB_RECURSE SOURCE_FILES src/wamr*.cpp)
add_library(MVVM_export ${SOURCE_FILES} ${UNCOMMON_SHARED_SOURCE})
add_executable(MVVM_restore src/restore.cpp ${UNCOMMON_SHARED_SOURCE})
add_executable(MVVM_checkpoint src/checkpoint.cpp ${UNCOMMON_SHARED_SOURCE})
add_executable(MVVM_profile src/profile.cpp ${UNCOMMON_SHARED_SOURCE})
include_directories(${LLVM_INCLUDE_DIRS} ${s2n_SOURCE_DIR}/api)
add_definitions(${LLVM_DEFINITIONS})
target_link_libraries(MVVM_export fmt::fmt spdlog::spdlog ${BLAS_LIBRARIES})
target_link_libraries(MVVM_restore ${LLVM_LIBRARIES} LLVM fmt::fmt spdlog::spdlog cxxopts::cxxopts ${BLAS_LIBRARIES} MVVM_export vmlib s2n tensorflow-lite absl::any absl::flat_hash_map Eigen3::Eigen absl::flags absl::hash absl::status absl::strings absl::synchronization absl::variant farmhash fft2d_fftsg2d flatbuffers::flatbuffers ruy::ruy ${WIN_EXTRA_LIBS})
target_link_libraries(MVVM_checkpoint ${LLVM_LIBRARIES} LLVM fmt::fmt spdlog::spdlog cxxopts::cxxopts ${BLAS_LIBRARIES} MVVM_export vmlib s2n tensorflow-lite absl::any absl::flat_hash_map Eigen3::Eigen absl::flags absl::hash absl::status absl::strings absl::synchronization absl::variant farmhash fft2d_fftsg2d flatbuffers::flatbuffers ruy::ruy ${WIN_EXTRA_LIBS})
target_link_libraries(MVVM_profile ${LLVM_LIBRARIES} LLVM fmt::fmt spdlog::spdlog cxxopts::cxxopts ${BLAS_LIBRARIES} MVVM_export vmlib s2n tensorflow-lite absl::any absl::flat_hash_map Eigen3::Eigen absl::flags absl::hash absl::status absl::strings absl::synchronization absl::variant farmhash fft2d_fftsg2d flatbuffers::flatbuffers ruy::ruy ${WIN_EXTRA_LIBS})
add_definitions(-DCXXOPTS_NO_RTTI=1)
