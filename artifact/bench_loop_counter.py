import csv
import common_util
from common_util import (
    plot_loop_counter,
    plot_loop_counter_snapshot,
    calculate_loop_counter_averages,
    aot_variant_freq,
    aot_variant_freq1,
    calculate_loop_counter_snapshot_averages,
)
from multiprocessing import Pool

cmd = [
    "llama",
    "bc",
    "bfs",
    "cc",
    "cc_sv",
    "pr",
    "pr_spmv",
    "sssp",
    "tc",
    "bt",
    "cg",
    "ep",
    "ft",
    "lu",
    "mg",
    # "sp",
    # "redis",
    # "hdastar",
]
folder = [
    "llama",
    "gapbs",
    "gapbs",
    "gapbs",
    "gapbs",
    "gapbs",
    "gapbs",
    "gapbs",
    "gapbs",
    "nas",
    "nas",
    "nas",
    "nas",
    "nas",
    "nas",
    # "nas",
    # "redis",
    # "hdastar",
]
arg = [
    ["stories110M.bin", "-z", "tokenizer.bin", "-t", "0.0"],
    ["-g20", "-vn300"],
    ["-g20", "-vn300"],
    ["-g20", "-vn300"],
    ["-g20", "-vn300"],
    ["-g20", "-vn300"],
    ["-g20", "-vn300"],
    ["-g20", "-vn300"],
    ["-g20", "-n1"],
    [],
    [],
    [],
    [],
    [],
    [],
    # [],
    # [],
    # ["maze-6404.txt", "8"],
]
envs = [
    "OMP_NUM_THREADS=1",
    "OMP_NUM_THREADS=1",
    "OMP_NUM_THREADS=1",
    "OMP_NUM_THREADS=1",
    "OMP_NUM_THREADS=1",
    "OMP_NUM_THREADS=1",
    "OMP_NUM_THREADS=1",
    "OMP_NUM_THREADS=1",
    "OMP_NUM_THREADS=1",
    "OMP_NUM_THREADS=1",
    "OMP_NUM_THREADS=1",
    "OMP_NUM_THREADS=1",
    "OMP_NUM_THREADS=1",
    "OMP_NUM_THREADS=1",
    "OMP_NUM_THREADS=1",
    # "OMP_NUM_THREADS=1",
    # "OMP_NUM_THREADS=1",
    # "a=b",
    # "a=b",
]

pool = Pool(processes=10)


def run_mvvm():
    results = [[] for _ in range(len(aot_variant_freq))]
    name = []
    results1 = []
    for _ in range(common_util.trial):
        for i in range(len(cmd)):
            for j in range(len(common_util.aot_variant_freq)):
                aot = cmd[i] + common_util.aot_variant_freq[j]
                results1.append(
                    pool.apply_async(common_util.run, (aot, arg[i], envs[i]))
                )
    # print the results
    results1 = [x.get() for x in results1]
    exec_time = ""
    for exec, output in results1:
        lines = output.split("\n")
        for line in lines:
            if line.__contains__("Execution time:"):
                exec_time = line.split(" ")[-2]
                # print(exec, exec_time)

        for a in common_util.aot_variant_freq:
            if exec.__contains__(a):
                if a == "-ckpt-loop-counter-1.aot":
                    results[0].append(exec_time)
                elif a == "-ckpt-loop-counter-4.aot":
                    results[1].append(exec_time)
                elif a == "-ckpt-loop-counter-8.aot":
                    results[2].append(exec_time)
                elif a == "-ckpt-loop-counter-16.aot":
                    results[3].append(exec_time)
                elif a == "-ckpt-loop-counter-20.aot":
                    results[4].append(exec_time)
                elif a == "-ckpt-loop-counter-30.aot":
                    results[5].append(exec_time)
                elif a == "-ckpt-loop-pgo.aot":
                    results[6].append(exec_time)
                elif a == "-stack.aot":
                    results[8].append(exec_time)
                elif (
                    a == ".aot"
                    and not exec.__contains__("-ckpt-loop-counter-1.aot")
                    and not exec.__contains__("-ckpt-loop-counter-4.aot")
                    and not exec.__contains__("-ckpt-loop-counter-8.aot")
                    and not exec.__contains__("-ckpt-loop-counter-16.aot")
                    and not exec.__contains__("-ckpt-loop-counter-20.aot")
                    and not exec.__contains__("-ckpt-loop-counter-30.aot")
                    and not exec.__contains__("-ckpt-loop-pgo.aot")
                    and not exec.__contains__("-stack.aot")
                ):
                    results[7].append(exec_time)
                    name.append(exec)
    final_results = list(zip(name, *results))
    print(results)
    return final_results


def run_mvvm_profile():
    results1 = []
    # for _ in range(common_util.trial):
    for i in range(len(cmd)):
        # for j in range(len(common_util.aot_variant_freq)):
        aot = cmd[i] + "-ckpt-loop-pgo.aot"
        results1.append(
            pool.apply_async(common_util.run_profile, (aot, arg[i], envs[i]))
        )
    results1 = [x.get() for x in results1]


def run_mvvm_snapshot():
    results = [[] for _ in range(len(aot_variant_freq1))]
    name = []
    results1 = []
    for _ in range(common_util.trial):
        for i in range(len(cmd)):
            for j in range(len(common_util.aot_variant_freq1)):
                aot = cmd[i] + common_util.aot_variant_freq1[j]
                results1.append(
                    pool.apply_async(
                        common_util.run_checkpoint_snapshot, (aot, arg[i], envs[i])
                    )
                )
    # print the results
    results1 = [x.get() for x in results1]
    exec_time = ""
    for exec, output in results1:
        lines = output.split("\n")
        for line in lines:
            if line.__contains__("Max Interval:"):
                exec_time = line.split(" ")[-1]
                # print(exec, exec_time)

        for a in common_util.aot_variant_freq:
            if exec.__contains__(a):
                if a == "-ckpt-loop-counter-1.aot":
                    results[0].append(exec_time)
                elif a == "-ckpt-loop-counter-4.aot":
                    results[1].append(exec_time)
                elif a == "-ckpt-loop-counter-8.aot":
                    results[2].append(exec_time)
                elif a == "-ckpt-loop-counter-16.aot":
                    results[3].append(exec_time)
                elif a == "-ckpt-loop-counter-20.aot":
                    results[4].append(exec_time)
                elif a == "-ckpt-loop-counter-30.aot":
                    results[5].append(exec_time)
                elif a == "-ckpt-loop-pgo.aot":
                    results[6].append(exec_time)
                elif (
                    a == ".aot"
                    and not exec.__contains__("-ckpt-loop-counter-1.aot")
                    and not exec.__contains__("-ckpt-loop-counter-4.aot")
                    and not exec.__contains__("-ckpt-loop-counter-8.aot")
                    and not exec.__contains__("-ckpt-loop-counter-16.aot")
                    and not exec.__contains__("-ckpt-loop-counter-20.aot")
                    and not exec.__contains__("-ckpt-loop-counter-30.aot")
                    and not exec.__contains__("-ckpt-loop-pgo.aot")
                ):
                    results[7].append(exec_time)
                    name.append(exec)
    final_results = list(zip(name, *results))
    print(final_results)
    return final_results


def write_to_csv(filename):
    # 'data' is a list of tuples, e.g., [(checkpoint_result_0, checkpoint_result_1, restore_result_2), ...]
    with open(filename, "a+", newline="") as csvfile:
        writer = csv.writer(csvfile)
        # Optionally write headers
        writer.writerow(["name", *aot_variant_freq])

        # Write the data
        for idx, row in enumerate(mvvm_results):
            writer.writerow(
                [
                    row[0],
                    row[1],
                    row[2],
                    row[3],
                    row[4],
                    row[5],
                    row[6],
                    row[7],
                    row[8],
                    row[9],
                ]
            )


def read_from_csv(filename):
    with open(filename, "r") as csvfile:
        reader = csv.reader(csvfile)
        next(reader)
        results = []
        for row in reader:
            results.append(
                (
                    row[0],
                    float(row[1]),
                    float(row[2]),
                    float(row[3]),
                    float(row[4]),
                    float(row[5]),
                    float(row[6]),
                    float(row[7]),
                    float(row[8]),
                    float(row[9]),
                )
            )
        return results


def read_from_csv_snapshot(filename):
    with open(filename, "r") as csvfile:
        reader = csv.reader(csvfile)
        next(reader)
        results = []
        for row in reader:
            results.append(
                (
                    row[0],
                    float(row[1]),
                    float(row[2]),
                    float(row[3]),
                    float(row[4]),
                    float(row[5]),
                    float(row[6]),
                    float(row[7]),
                    float(row[8]),
                )
            )
        return results
    
def write_to_csv_snapshot(filename):
    # 'data' is a list of tuples, e.g., [(checkpoint_result_0, checkpoint_result_1, restore_result_2), ...]
    with open(filename, "a+", newline="") as csvfile:
        writer = csv.writer(csvfile)
        # Optionally write headers
        writer.writerow(["names", *aot_variant_freq1])

        # Write the data
        for idx, row in enumerate(mvvm_results):
            writer.writerow(
                [
                    row[0],
                    row[1],
                    row[2],
                    row[3],
                    row[4],
                    row[5],
                    row[6],
                    row[7],
                    row[8],
                ]
            )


if __name__ == "__main__":
    # run_mvvm_profile()
    # mvvm_results = run_mvvm()
    import matplotlib

    matplotlib.rcParams["pdf.fonttype"] = 42
    matplotlib.rcParams["ps.fonttype"] = 42

    # write_to_csv("policy_loop_counter2.csv")
    mvvm_results = read_from_csv("policy_loop_counter2.csv")
    plot_loop_counter(mvvm_results, "policy_loop_counter.pdf")
    print(calculate_loop_counter_averages(mvvm_results))
    # name= [   "llama",
    # "bc",
    # "bfs",
    # "cc",
    # "cc_sv",
    # "pr",
    # "pr_spmv",
    # "sssp",
    # "tc",
    # "bt",
    # "cg",
    # "ep",
    # "ft",
    # "lu",
    # "mg",   "llama",
    # "bc",
    # "bfs",
    # "cc",
    # "cc_sv",
    # "pr",
    # "pr_spmv",
    # "sssp",
    # "tc",
    # "bt",
    # "cg",
    # "ep",
    # "ft",
    # "lu",
    # "mg",   "llama",
    # "bc",
    # "bfs",
    # "cc",
    # "cc_sv",
    # "pr",
    # "pr_spmv",
    # "sssp",
    # "tc",
    # "bt",
    # "cg",
    # "ep",
    # "ft",
    # "lu",
    # "mg",   "llama",
    # "bc",
    # "bfs",
    # "cc",
    # "cc_sv",
    # "pr",
    # "pr_spmv",
    # "sssp",
    # "tc",
    # "bt",
    # "cg",
    # "ep",
    # "ft",
    # "lu",
    # "mg",   "llama",
    # "bc",
    # "bfs",
    # "cc",
    # "cc_sv",
    # "pr",
    # "pr_spmv",
    # "sssp",
    # "tc",
    # "bt",
    # "cg",
    # "ep",
    # "ft",
    # "lu",
    # "mg",   "llama",
    # "bc",
    # "bfs",
    # "cc",
    # "cc_sv",
    # "pr",
    # "pr_spmv",
    # "sssp",
    # "tc",
    # "bt",
    # "cg",
    # "ep",
    # "ft",
    # "lu",
    # "mg",   "llama",
    # "bc",
    # "bfs",
    # "cc",
    # "cc_sv",
    # "pr",
    # "pr_spmv",
    # "sssp",
    # "tc",
    # "bt",
    # "cg",
    # "ep",
    # "ft",
    # "lu",
    # "mg",   "llama",
    # "bc",
    # "bfs",
    # "cc",
    # "cc_sv",
    # "pr",
    # "pr_spmv",
    # "sssp",
    # "tc",
    # "bt",
    # "cg",
    # "ep",
    # "ft",
    # "lu",
    # "mg",   "llama",
    # "bc",
    # "bfs",
    # "cc",
    # "cc_sv",
    # "pr",
    # "pr_spmv",
    # "sssp",
    # "tc",
    # "bt",
    # "cg",
    # "ep",
    # "ft",
    # "lu",
    # "mg",]
    # mvvm_results = [['41322846', '17445', '25585', '15101203', '33233', '17990', '45751', '33246', '38409', '57513', '20782', '24551', '35269', '20567', '54178810', '104859211', '17743', '17487', '54984819', '31742', '22385', '16880', '21977', '54948952', '59644512', '17504', '24214', '25241', '32985', '70020', '67549728', '17222', '19405', '17271', '17320', '21818', '17430', '17646', '21224', '16527414', '35629', '54208217', '34484', '59623140', '50631', '41237153', '54954585', '19025', '20947', '21044', '17561', '17463', '17521', '21873', '54217938', '59602672', '25318', '16976', '25422', '57511', '41335268', '15103262', '22579', '27301', '17816', '17234', '34924', '17739', '17512', '57512', '20273', '34274', '41204', '34449', '54179823', '102643276', '42633', '36695', '17439', '17799', '35120', '17385', '17493', '21193', '59643998', '54366660', '93368', '17615', '33739', '57880', '60025123', '17481', '17392', '25421', '17344', '17409', '17360', '17197', '17519', '57897', '34084', '32868', '33933', '17852', '54180944', '102710359', '20553', '17328', '17410', '22014', '17373', '17653', '33869', '21330', '57905', '24575', '16614731', '32761', '25205', '16359535', '41275485', '15087338', '21131', '17860', '17237', '17646', '17573', '56025160', '21674', '57515', '33928', '17488', '36033', '24553', '57516', '41278601', '17049', '16615', '20880', '21732', '21069', '17028', '17185', '17228', '50317', '59581333', '138966', '24984', '17450', '57894'], ['41289836', '17639', '24254', '35775', '22610', '20670', '17740', '17336', '34300', '539013', '54180004', '35469', '17848', '2442756', '57475', '82369988', '18718', '50925', '21043', '21153', '17588', '33571', '15355729', '17440', '538999', '27078', '51547', '34155', '54200584', '59674745', '41279862', '21220', '19203', '15088330', '17373', '20995', '32828', '17873', '17702', '539006', '22751', '16579271', '22913', '2442749', '50312', '41271099', '13845159', '17691', '17482', '22270', '26335', '17394', '17318', '20378', '539027', '51346', '21241', '44719', '2442726', '57490', '59952637', '16864', '21024', '17588', '17112', '21959', '17524', '21994', '17309', '538999', '25189', '20891', '39467', '2442749', '57859', '41243646', '17440', '17548', '17503', '17602', '17097', '17523', '19343', '23902', '6218115', '36470', '24288', '25897', '2442729', '52521', '41222859', '17676', '17245', '17708', '36359', '17662', '34858', '34112', '20082', '16549289', '37803', '59598330', '36440', '2442749', '50612', '41459888', '17520', '19140', '17786', '35948', '23937', '21004', '22571', '17394', '539006', '34848', '32524', '34867', '2442742', '62395', '41236742', '36403', '20893', '54967379', '51084', '35845', '17787', '46367', '17615', '539027', '28532', '17485', '24442', '2442749', '54173887', '41220768', '36300', '17755', '15305349', '20315', '20626', '54958007', '17633', '50883', '540186', '25261', '16607691', '54897900', '2451790', '61924'], ['41307241', '17363', '18089', '54895055', '17539', '17576', '28364', '17338', '18183', '538994', '26779', '35469', '6190588', '2451804', '57860', '41272452', '17603', '22655', '15291328', '26260', '21620', '19152', '33868', '22252', '539006', '26786', '51547', '6202781', '2451797', '54181582', '41291234', '36219', '38974', '51512', '17628', '17447', '17424', '17779', '35830', '16555867', '26768', '16579271', '6190589', '59606615', '16536436', '41235129', '18845', '21481', '17466', '42121', '34532', '36235', '51221', '17262', '538999', '26793', '21241', '6190595', '2442756', '50309', '41233932', '17790', '17852', '92661', '35257', '21505', '17662', '34600', '15077711', '3283967', '26792', '20891', '6190580', '2442749', '57483', '41238962', '56615028', '24897', '56623196', '17626', '24433', '17481', '25075', '35862', '3267428', '54179218', '24288', '6203096', '54187248', '59588498', '41220099', '111269', '17073', '15100470', '17544', '17154', '17553', '34905', '18333', '16605749', '26771', '59598330', '6204379', '2442749', '50675', '41281545', '35714', '17094', '17327', '16955', '20425', '17273', '56006440', '34500', '556148', '26779', '32524', '6190594', '2442756', '57608', '41250792', '18156', '17692', '17269', '54964783', '17410', '17137', '17797', '23250', '538999', '59604801', '17485', '6190569', '2442749', '50444', '41235430', '18093', '16929', '21904', '24616', '20787', '23492', '17628', '19188', '543055', '39335', '16607691', '6196230', '54202595', '57965'], ['41438421', '18788', '54951852', '17423', '17168', '23121', '56615993', '17388', '17945', '539020', '72795', '35469', '27606869', '59618241', '97976', '59988798', '17634', '35066', '25615', '56616332', '17495', '17661', '21958', '17968', '539027', '72805', '51547', '27606888', '2442744', '52502', '41326940', '22106', '17585', '18366', '56633314', '15232120', '17628', '20704', '18358', '539010', '16532237', '16579271', '27606974', '2442756', '57880', '41245773', '17708', '16946', '17385', '18069', '17743', '22368', '17136', '21186', '3374626', '16521071', '21241', '27606865', '24291363', '50311', '41217814', '17752', '18039', '36112', '17644', '21560', '32333', '17771', '20784', '539006', '16527998', '20891', '55485206', '16263229', '57519', '102631135', '37800', '17496', '17419', '21758', '17358', '36491', '17603', '17589', '54237496', '72805', '24288', '27607011', '2442749', '50289', '102630889', '17445', '34210', '24157', '18260', '21629', '38515', '17254', '20571', '539005', '72812', '59598330', '27611555', '2442749', '50290', '60009564', '17796', '15261081', '17554', '16872', '18182', '17704', '33176', '25467', '539676', '72795', '32524', '27606528', '59614949', '50318', '41238702', '44300', '22065', '17353', '17098', '20184', '21169', '33549', '17351', '539005', '72802', '17485', '39154134', '2442749', '52544', '41323480', '17810', '18319', '24982', '17223', '37621', '17790', '20288', '17006', '539020', '72805', '16607691', '39039493', '2453030', '60224'], ['102633292', '17741', '17437', '17655', '15161544', '21813', '16988', '18164', '17631', '538999', '72777', '35469', '34642615', '2442769', '58023', '41193366', '17675', '20450', '36797', '24642', '34587', '19680', '17166', '25402', '539006', '72795', '51547', '127557551', '2442714', '60581', '41276968', '20595', '33909', '19565', '17279', '20791', '17501', '92520', '18046', '539006', '72795', '16579271', '67918205', '2448663', '52928', '102073490', '167517', '34160', '21933', '17859', '17560', '33576', '20371', '22384', '3282938', '99965', '21241', '34625966', '59614421', '54699', '61438356', '18482', '51059', '54983720', '17387', '17295', '17532', '20359', '21068', '538999', '72795', '20891', '124424486', '2442749', '83384', '41231932', '22073', '21983', '18127', '17414', '17342', '17839', '20508', '16912', '54230608', '72775', '24288', '34630276', '2442749', '50312', '41222916', '21623', '21374', '54960112', '17228', '21828', '15080922', '35648', '17672', '16343593', '99933', '59598330', '34629437', '2442748', '59756', '41250807', '17347', '22668', '41886', '17581', '20092', '23510', '15518058', '35582', '538992', '16324363', '32524', '67353926', '2444823', '106061', '41216914', '18135', '17564', '42935', '17641', '17702', '17562', '21101', '24866', '538999', '72805', '17485', '34635445', '2442755', '56450', '102137489', '21568', '18013', '17137', '21153', '17509', '17704', '34074', '17196', '538999', '169928', '16607691', '34631196', '54204678', '57874'], ['41206378', '17486', '19018', '183136', '19993', '17820', '51192', '17144', '17326', '59648143', '72795', '35469', '152218998', '16454374', '54195737', '41279517', '50979', '17489', '35513', '17801', '23931', '35049', '50467', '16835', '539006', '72777', '51547', '546272067', '2442756', '16580243', '60094463', '34398', '16960', '17573', '17511', '17521', '56615185', '22800', '96205', '16348753', '72782', '16579271', '193257308', '2442748', '50283', '41254468', '17812', '17472', '21251', '20410', '18000', '17805', '17699', '35477', '538992', '72795', '21241', '206389943', '2442742', '57043', '41188342', '20735', '17372', '41828', '17467', '108844', '23817', '17510', '17812', '16630246', '153589', '20891', '152229677', '2442751', '16344942', '41219371', '17322', '17500', '17235', '22339', '21708', '22011', '17379', '17292', '16629751', '72795', '24288', '152256971', '2442742', '50673', '41227256', '55010550', '21148', '21049', '18640', '43185', '17292', '21728', '51160', '539006', '72805', '59598330', '152207571', '2442749', '70865', '233210142', '35338', '20333', '17368', '24848', '17467', '17474', '22476', '35038', '538999', '72788', '32524', '152242074', '2442748', '54183471', '41366111', '17960', '17534', '20699', '33826', '33579', '35030', '17408', '23751', '539006', '109059', '17485', '170907445', '35939544', '50682', '41221381', '19249', '17297', '41831', '17779', '51181', '20949', '24998', '24091', '539012', '72788', '16607691', '152216681', '2442756', '57496'], ['41261715', '20410', '17333', '21278', '17705', '17332', '51690', '20740', '20620', '59754', '23617', '24866', '18399997', '35782', '50305', '41248073', '17709', '22200', '17679', '17754', '17638', '21867', '50971', '20906', '60108', '16810', '20381', '18296061', '17289', '57842', '778932506', '17651', '29284', '20111', '32899', '17819', '17401', '50879', '24474', '18534726', '17263', '25188', '17527', '35226', '57876', '41235739', '35434', '18464', '60616189', '17365', '34330', '17868216', '17476', '34364', '57519', '25649', '17286', '20778', '24025', '57491', '41248264', '59096441', '17354', '34106', '45255', '36232', '17374', '21509', '39323', '60377812', '51443', '37399', '60901547', '22673', '18502725', '41252621', '21469', '59092251', '16928', '21252', '34998', '20128', '20384', '17395', '57901', '26173', '20532', '33285', '16722', '59757', '59988568', '17375', '18572', '45649', '204578', '17882482', '34848', '24958', '27606', '57519', '35667', '25880', '60902332', '20160', '57477', '41276528', '60588886', '52479', '21935', '29232', '20388', '32354', '25090', '20697', '60907426', '17737', '51350', '17367', '24664', '57485', '41293556', '21437', '20286', '17345', '33154109', '17629', '17151', '60057608', '33003', '57520', '24260', '26898', '24986', '34348', '60110', '41220950', '17529', '60605143', '21092', '33571', '74602', '20556', '31868', '33438', '60130', '18291', '33055', '18503543', '33460', '57787'], ['41287383', '25670', '40122', '36639', '17481', '17668', '17558', '36751', '23659', '313190', '55365', '24866', '96948073','33460', '57787' '15438588', '59680', '41234060', '21507', '17574', '24718', '17162', '17020', '20953', '20972', '36726', '3336938', '55343', '20381', '96938321', '1832525', '50298', '41262304', '17265', '32627', '16995', '20198', '38267', '17247', '17294', '21298', '313179', '57322', '25188', '177575804', '1832512', '56487254', '41515401', '17740', '35666', '16969', '17938', '17768', '35508', '17037', '17441', '313179', '55388', '17286', '142476731', '1832505', '57881', '41213813', '24478', '17692', '17335','33460', '57787' '34436', '21363', '17526', '21146', '17786', '313179', '56480741', '37399', '97046896', '1832512', '57882', '41355159', '21704', '56708762', '62152', '18155', '18379', '17868', '20658', '18673646', '444768', '55378', '20532', '96928751', '1840366', '50453', '41272858', '24563', '55216522', '55223072', '20505', '25627', '22327', '17400', '17420', '313188', '56989848', '25880', '96922258', '1850573', '80502', '41242609', '26548', '17030', '26241', '33368', '18149', '19102', '20520', '20509', '313181', '56996971', '51350', '153980985', '1832505', '56488898', '41225325', '55223520', '17282', '20417', '24678', '17355', '21117', '56884612', '24152', '313179', '15414029', '26898', '96920137', '1838323', '56461079', '41265219', '38588', '101150', '17615', '27690', '114896', '21413', '20891', '18666320', '313178', '147436', '33055', '96920480', '1836568', '15495371','33460', '57787']]
    # mvvm_results = list(zip(name, *mvvm_results))
    # write_to_csv_snapshot("policy_loop_snapshot.csv")
    # mvvm_results = read_from_csv_snapshot("policy_loop_snapshot.csv")
    # plot_loop_counter_snapshot(mvvm_results, "policy_loop_counter_snapshot.pdf")
    # print(calculate_loop_counter_snapshot_averages(mvvm_results))
